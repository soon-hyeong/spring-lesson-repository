**sprimg lesson note**

주요 목차 ( spring 1차 프로젝트 전까지 ) 
- Maven 
- Git 형상관리 
- Spring 관련 용어 정리 
- IOC / DI  설정 스타일 
  1) xml 
  2) Annotation
  3) Java Confing
 - SpringBoot 소개 및  CommandLineRunner 
 - AOP, Logging 
 - MyBatis Framework 
 - SprigngMVC (Legacy)
 - SpringBoot Web 
 - Thymeleaf / layout : thymeleaf dialect
 - JUnit(TDD)
 - Ajax/JSON 
 - CSS Framework : Bootstrap 
 - Agile Scrum : Jira
 -------------------------------
 
 - Spring 관련 용어 정리 
 
 library : 라이브러리 , 재사용 가능한 프로그램들의 모음
 jar : 자바 프로그램 압축 확장자 ( springboot application 을 build )
 war : 자바 웹어플리케이션 확장자 
 component : 독립적 기능단위를 가진 부품 ( 부품화되는 요소를 컴포넌트라고 함 ) 
 			 Bean => 자바 컴포넌트 , 스프링에서 관리하는 컴포넌트(객체)를 Bean이라고 한다
 API : Application Programming Interface 응용 프로그램을 개발하기 위해 제공하는 
 	   인터페이스 
 Framework : 사전적 의미는 틀 , 
             frame( 틀 ) + work ( 일 ) => 일을 잘되게 하기 위해 제공하는 틀  
             반완전한 어플리케이션 -> 가능한 모든 요소를 지원하여 비즈니스에 집중하도록 함 
 Spring Framework : 자바 어플리케이션의 설계, 구현 , 테스트 , 운영에 대한 
                    Infrastructure 기반을 제공한다 
                    다양한 컴포넌트 및 재사용 가능한 라이브러리와 디자인 패턴을 제공한다
                    IOC/DI, AOP, SpringMVC, Data Access 를 위한 MyBatis , JPA 
                    , 신속한 설정과 개발을 위한 Spring Boot , 
                    단위 테스트를 위한 JUnit ,  보안을 위한 Spring Security, 
                    MSA 를 위한 Spring Cloud 등을 기술을 지원한다 
                    
 Maven  :  프로젝트 관리 도구 
 핵심 역할 
 1. 의존성 관리 (Dependency Management)와 2. 빌드 자동화 (Build Automation)                 
    필요 라이브러리를 일괄적으로 관리                 프로젝트 완료 후 배포 deploy 를 위해 jar or war 로 build 한다 
                     
 **IOC 와 DL/DI**                   
                    
   - IOC 개념 : Inversion Of Control  , 역 제어 , 제어의 역전  => 소프트웨어 설계 원리이자 디자인 패터ㄴ 
   					  객체 or Component or Bean 제어를 IOC Container에 위임 
   					  다시 말하면 필요시 객체를 생성하는 것이 아니라 IOC Container로부터 필요한 객체를 받아오는 구조 
   					  Why ?  Loose Coupling  느슨한 결합도 : 결합도란 모듈간의 상호 의존도, 결합도가 느슨해지면  확장성, 
   					  유지보수성 향상됨     
   - DI 개념 :  Dependecy Injection , 의존성 주입 => 디자인 패턴 
                     필요로 하는 의존성(Dependency: bean or component) 을 주입 Injection 을 통해 확보 
                     IOC 를 DI 기법을 통해 실현한다  
                          
   - DL 개념 :  Dependecy Lookup , 의존성 검색 => 디자인 패턴 
                     필요로 하는 의존성(Dependency: bean or component) 을 검색 Lookup 을 통해 확보 
                     IOC 를 DL 기법을 통해 실현한다                         
               					               
 **Spring 설정 방식**
 XML, Annotation, Java Config, Properties 등이 있다.
 XML + Annotation 조합 또는 Annotation + Java Config 또는 XML + Annotation + Java Config + Properties 로 다양하게 조합될 수 있다
 
 **Spring Annotation Config**
 - 컴포넌트 계열 애너테이션 : 스프링 컨테이너에게 해당 클래스가 bean 생성 대상임을 알리는 애너테이션
 					  Bean으로 생성되고 라이프 사이 관리 및 싱글톤으로 운영됨
 @Component : 컴포넌트 계열 상위 타입, 일반 컴포넌트 클래스에 명시, bean으로 생성 관리
 컴포넌트 계열 하위 어노테이션
 @Controller : MVC 중 Controller (RestController) 영역 Bean에 명시
 @Service : Business 또는 Service Layer에 명시
 @Repository : Data Access Object 또는 Persistence Layer 에 명시
 
 - 설정 애너테이션
 @Configuration : 해당 클래스가 Spring 설정 클래스임을 Spring Container에게 알리는 애너테이션
 @Bean 애너테이션 : @Configuration이 명시된 클래스 내부의 메서드에 사용하는 에너테이션
 				 메서드의 리턴값을 Bean으로 생성해 관리, 주로 외부 라이브러리에 의한 객체를 Bean으로 생성 관리할 때 사용한다
 @ComponenetScan(base package) : 지정한 base package와 그 하위의 모든 패키지들의 클래스들을 스캔해서
 								 bean 생성과 DI을 실행한다
 - DI(Dependency Injection)
 @Autowired : 의존성 or Bean or Component or 필요객체를 타입으로 검색해 
 			  주입(field, method, constructor 다 가능)
 @Qualifier(bean name) : 만약 동일한 타입의 객체 bean들이 여러개일 경우
 						 직접 bean name을 명시해서 주입 받을 수 있다
 그 외 @Resource, @Inject 등의 DI 관련 애너테이션이 있다
 
 **DI는 생성자 Constructor 를 통한 DI를 권장한다**
 final field에 Constructor를 통한 DI 를 권장하고 현업에서 주로 이렇게 사용한다
 ex)
 	@Controller
 	public class MemberController{
 		private final MemberService meberService;
 		@Autowired // 생략 가능 : 스프링 컨테이너가 의존성 주입 DI를 자동으로 해준다.
 		public MemberController(MemberService memberService){
 			this.memberService = memberService;
 		}
 	}
 	**final field 와 Constructor 를 통한 DI를 권장하는 이유**
 	-의존성 또는 Bean 또는 객체의 불변성 보장
 	 final field (final 인스턴스 변수(상수화))는 생성자로 초기화 될 수 있음
 	 불변성은 멀티스레딩시 안전
 	-의존성 확보가 보장된다. NPE(NullPointerException)을 사전에 방지할 수 있다
 	 참고로 Constructor Injection이 아닌 field Injection 또는 setter Injection은 의존성(필요로 하는 객체)을 주입하지 않아도 생성이 가능
 	 -> Constructor Injection은 필요로 하는 bean or 객체 or 의존성을 반드시 주입해야 해당 객체가 생성 가능하다 => 확실한 의존성 주입을 보장
 	*Spring IOC 컨테이너의 자동 DI(의존성 주입 기준)
 	 ===> Spring 4.3 버전 이상 (2025.7 기준 Spring 6 버전) 부터 지원
 	 	  단일 생성자(매개변수 여러개 가능)에 한해 자동 주입(@Autowired 생략 가능)
 	 	  만약 생성자가 여러 개일 경우에는 DI 관련 Annotation을 명시해야 한다
                    
 **Spring Bean LifeCycle**
 Bean : 스프링 컨테이너가 관리하는 객체(컴포넌트)
 
 Spring Container 실행(설정 로딩) -> Bean 생성 & DI
 -> 초기화 콜백(init callback) : @PostConstruct 생성 후 초기화 작업
 -> 서비스 : Bean의 기능 실행
 -> 소멸 콜백 (destroy callback ) : @PreDestroy : 소멸 직전 실행되는 작업
 -> 종료                    
                    
 ***Spring Boot***                   
 스프링부트는 스프링의 하위 프로젝트
 "단독으로 빠르게 개발 가능한 스프링 프로젝트"
 자동 설정, 웹 컨테이너 내장 등을 지원한다
 
 * COC : Convention Over Configuration 설정을 넘어 관례로
   SpringBoot 상에서는 관례적 설정들이 자동 지원
 
 **SpringBoot의 설정**
 
 @SpringBootApplication : 스프링 부트 설정 애너테이션
 1.설정 정보 2.Bean 생성, DI 3.자동 설정 지원
 => 다음 세가지의 기능을 합니다
	1. @SpringBootConfiguration ==> @Configuration: 이 클래스는 스프링 설정 클래스입니다
		@Bean 을 이용해 외부 라이브러리 (ex :DBCP)를 사용할 수 있도록 spring bean 생성 관리
	2. @ComponentScan(base package) ==> 지정한 패키지와 패키지 하위의 모든 클래스들을 스캔해서 bean 생성, DI 처리
	3. @EnableAutoConfiguration ==> 필요한 설정들을 자동으로 해줘
 
 **SpringBoot의 CommandLineRunner**                   
 CommandLineRunner 커맨드 라인 러너란
 SpringBoot 어플리케이션이 완전히 준비되면 CommandLineRunner가 자동으로 작동되어 우리가 정의한 로직이 수행됨
 
 why? 배치작업, 초기 데이터 설정, 캐쉬 작업, 헬스 체크 : DB 연결 상태 확인, 외부 API 상태 확인
 	  학습 예제용도로도 적합
 	  
 스프링 부트의 기본 구성
 @SpringBootApplication
 public class MyApplication{
 	public static void main(String[] args){
 		SpringApplication.run(MyApplication.class, args);
 	}
 }
                    
 스프링 부트의 기본 구성 + CommandLineRunner 서블릿 컨텍스트 리스너처럼 스프링 어플리케이션이 실행된 직후 뛰어가는 
 @SpringBootApplication
 public class MyApplication implements CommandLineRunner{
 	public static void main(String[] args){
 		SpringApplication.run(MyApplication.class, args);
 	}
 	@Override
 	public void run(String ... args)throws Exception{
 		//커맨드라인 러너의 실행 내용
 		//배치, 헬스 체크 등...
 	}
 }
                    
 **AOP**
 Aspect Orient Programming 관점 지향 프로그래밍
 Aspect -> 관점 : Core Concern 핵심 관심사 + Cross Cutting Concern 횡단관심사 or 공통관심사
 시스템을 핵심관심사와 공통 관심사로 구분해 분석, 설계, 구현, 테스트 운영 한다
 AOP 목적은 공통적, 반복적인 작업을 피하고 효과적으로 개발하고 유지보수하기 위함
 
 "AOP는 OOP를 더욱 OOP 답게 한다"
 
 Core Concern 핵심 관심사 : 시스템 업무 목적에 해당하는 주요 로직(ex - 회원관리, 결제 ..)
 Cross Cutting Concern 횡단 관심사 : 시스템 여러 부분에 걸쳐 적용되는 공통 로직
 								  (ex- 로깅, 트랜잭션 보안, 성능 체크 등)
 
 - AOP 동작원리
 Proxy Design Pattern : Proxy는 대리인을 의미
 Proxy 를 이용해 특정 로직 수행을 대행하는 디자인 패턴
 사용하는 측과 서비스를 제공하는 측의 매개자로서 Proxy 객체가 역할 담당
 (ex: 아이유 팬들 <---> 아이유 매니저들(PROXY)<---> 아이유(core))
 
 - spring09 AOP 예제 통해 확인
 AOP는 IOC(DI, DL)를 전제로 이루어진다
 Spring IOC Container 가 AOP가 적용될 때 실제 구현체(ex - MemberServiceImpl)가 아니라
 실제 구현체의 참조를 가지고 있는 Proxy(대리인) 객체를 DI 의존성 주입시킨다. 이를 통해 사용하는 측은 실제 구현체로 인식하며
 비즈니스 메서드를 호출하고 중간 매개자인 proxy 가 AOP 설정에 따라 메서드 실행전, 실행후, 특정 예외 발생시 등의 상황에 Cross Cutting Concern 공통 기능
 로직을 실행하고 Core 로직을 실행한다
 
 - AOP 관련 주요 키워드
 Aspect : Cross Cutting Concern 로직 정의 클래스
 PointCut : aop 적용 대상을 지정
 Advice : aop 적용 시점 ( Before 메서드 실행전, After Returning 메서드 정상 수행 후, 
 		  Ater throwing 특정 예외 발생시, After 예외 발생 여부와 관계없이 메서드 실행 후 항상,
 		  Around 앞의 4가지 advice를 모두 포함 
 
 **로깅**
 로깅 시스템 : 시스템 동작에 관한 정보를 제공하는 기록
 주로 시스템 실행 정보 및 성능, 에러에 대한 정보를 저장, 제공
 (주로 파일 및 콘솔에 로깅)
 참고) System.out.println()-> 개발 및 운영에 관한 로그 레벨 지정 불가능하고 파일과 같은 외부에 저장할 수도 없음
 자바 진영에서 대표적인 로깅 프레임웍크는 logback, log4j2 가 있음
 스프링 부트에서는 Logback이 기본 내장되어 있음
 - SLF4J : Simple Logging Facade For Java (Facade 겉면, 소통부)
   다양한 로깅 프레임워크 구현체들을 표준화하는 인터페이스 역할
   이후 로깅 구현체를 변경해도 별도의 수정 없도록 캡슐화하는 역할을 함
 - 로깅 프레임워크 특징
   설정 정보로 패키지별 레벨 설정이 가능
   지정한 레벨 등급 이상의 로그만 기록, 저장하는 방식
   용량설정, 실행시 설정 변경 등 다양한 기능을 제공
   
 - 로그 레벨 (log level) : 만약 INFO 로 지정하면 INFO, WARN, ERROR 실행됨
   ERROR
   WARN
   INFO
   DEBUG
   TRACE                     
                    
  **MyBatisFramework**
  Persistence Layer Framework(영속성 계층 프레임워크)로서 SQL Mapper Framework
  													   (SQL 중심)
  데이터베이스 연동 로직을 효율적으로 개발 할 수 있도록 지원하는 SQL Mapper Framework
  
  spring mybatis 의존성 관리 : maven의 pom.xml
  spring mybatis 설정 : application.properties                  
  
  Java						XML Mapper					Database
  <<interface>>				MemberMapper.xml			MySql
  MemberMapper 
                    
				
     spring container               
     Proxy 를 생성해 실행되는 구조
                    
 **Spring MVC**
 Java Web Application 을 효과적으로 설계, 개발, 운영 할 수 있도록 기반을 제공
 기반 : 다양한 디자인(설계) 패턴과 컴포넌트를 제공
 
 Spring MVC에 내장된 디자인 패턴 : MVC, FrontController, Factory, Commabd, Singleton Pattern
 
 Spring MVC 요청과 응답까지의 실행 흐름
 client가 request하면 DispatcherServlet 이 동작되고실제 컨트롤러를 연결할 HandlerMapping이 컨트롤러를 실제 요청을 처리할 컨트롤러 구현체를 연결하고
 HandlerAdapter가 컨트롤러 메서드를 실행한다(이 때 필요한 매개변수를 가공해 전달함)
 클라이언트에게 응답할방식을 ViewResolver가 제공(jsp or thymeleaf or ajax response 등)하여 그에 따라 View를 응답한다
 
 Spring MVC의 주요 컴포넌트
 DispatcherServlet : Front Controller 역할을 담당 - Spring 설정 로딩 - IOC/DI/AOP 등을 지원
 HandlerMapping : 요청을 처리할 컨트롤러를 연결 (실제 구현체 RequestMappingHandlerMapping)
 HandlerAdapter : Controller를 실행하는 역할, 컨트롤러 메서드에서 필요로 하는 데이터를 가공해 전달
 ModelAndView : Model 연동 공유 정보 (request.setAttribute(name, value))
 				View 정보 ( /member/ok or redirect:/result )
 						   /src/main/resources/template/member/ok.html==> viewResolver 가 처리
 ViewResoler : 클라이언트에게 응답할 방식을 지원 (jsp or thymeleaf or ajax json 등의 방식을 지원)
 
 HTTP Response Status Code : 200, 404, 405, 500 등
 
 SpringMVC 의 주요 어노테이션
 @Controller : 컨트롤러 로직을 처리하는 클래스
 @RequestMapping : 요청 처리 서버 프로그램 url과 controller class or method를 mapping
 				   @GetMapping, @PostMapping ...
 @ResponseBody : ajax 응답을 위한 어노테이션
 @RestController : @ResponseBody + @Controller
 
 POJO
 
 **Thymeleaf**
 SpringBoot와 함께 동적 웹페이지 렌더링에 널리 사용되는 Java 템플릿 엔진
 HTML의 구조상에서 개발, 기존 html을 변경하지 않고 개발하는 방식 (Natural Template)
 서버 실행 없이도 브라우저에서 웹화면을 볼 수 있다 -> 디자인 팀과 협업
 
 Thymeleaf와 유사한 자바 템플릿 엔진 - jsp(jstl), freemarker ... \
 
 jsp의 구동방식
 사용자 요청 - 서블릿 컨테이너 ( 웹컨테이너 ) - jsp - java 생성 - .class 컴파일 - 서블릿 실행 - html 응답
 
 thymeleaf의 구동방식 
 사용자 요청 - 스프링 컨트롤러 - 템플릿 엔진 - (thymeleaf)html 파싱, 데이터 할당binding - 클라이언트에게 전달할 html로 응답 
 
 **TDD**
 TDD(Test Driven Development) : 개발 방법론 중 하나로 코드 작성 전에 먼저 테스트 코드를 작성하는 방식
 JUnit : TDD를 위한 자바 테스트 프레임워크
 Given-When-Then : 하나의 테스트 시나리오를 작성하는 구조 또는 패턴
 Given : 테스트를 위한 초기 상태를 설정 (예 : "잔액이 10000원인 계좌가 있다")
 When : 테스트하고자 하는 행동을 정의 (예 : "5000원을 출금한다")
 Then : 그 행동의 예상 결과를 검증 (예 : "계좌 잔액이 5000원이 되어야 한다")
 
 **테스트 관련 세가지 개념의 관계"
 TDD라는 방법론을 따라 개발할 때
 JUnit이라는 테스트 프레임워크를 이용해 테스트코드를 작성하며,
 그 테스트 코드를 Given-When-Then 이라는 구조에 맞춰 작성하는 것이 일반적 흐름이다.
 
 **Spring Transaction**
트랜잭션 처리의 핵심적인 목적은 데이터베이스 작업의 안정성과 신뢰성을 보장하기 위함. 
ACID라고 불리는 네 가지 속성 : 일관성, 원자성, 격리성 , 지속성을 위한 것. 

@Transactional  : 스프링 AOP 트랜잭션 처리를 위한 애너테이션  
AOP Proxy 기반의 트랜잭션 처리 방식으로 @Transactional 어노테이션이 붙은 클래스에 대해 
프록시(대리인) 객체를 만듬. 
이 프록시 객체가 실제 비즈니스 로직을 담고 있는 객체를 대신하여 
사용하는 측의 요청을 받고 트랜잭션 처리를 대행함  
사용하는 측에서 @Transactional 적용된 메소드를 호출하면,  
AOP Proxy가 트랜잭션 시작, 커밋(commit), 롤백(rollback)과 같은 기능을 수행함 .
비즈니스 로직이 모두 성공적으로 완료되면 프록시는 트랜잭션을 커밋하고, 
만약 예외가 발생하면 트랜잭션을 롤백함
       
@Transactional : 데이터베이스에 데이터를 저장, 수정, 삭제하는 DML(INSERT, UPDATE, DELETE)
 작업을 수행할 때 사용됨
지정한 트랜잭션 내에 문제없이 수행되면 COMMIT , 문제 발생하면 자동 롤백
 
@Transactional(readOnly = true) : 오직 읽기(Read Only)만 가능한 트랜잭션이 생성 , 
성능 향상에 기여. 트랜잭션이 읽기 전용으로 설정되므로, 불필요한 쓰기 관련 오버헤드가 제거되어 성능이 최적화 됨 ,
데이터베이스에 쓰기 락을 걸지 않으므로, 동시성 처리에 유리

서비스 특성에 따라 삽입,삭제,수정 서비스가 중심이라면 
서비스 클래스 단위에서 @Transactional  , 메서드 단위에서 조회서비스에 대해 
@Transactional(readOnly = true) 
또는 
조회 서비스가 중심이라면 
서비스 클래스 단위에서 @Transactional(readOnly = true), 
메서드 단위에서 삽입,삭제,수정 서비스에 대해 
@Transactional 로 처리하면 됨
 
 스프링 트랜잭션의 예외 정책 특성 : java.lang.RuntimeException 계열의 Exception 이 발생하면 자동 롤백되는 기본속성
 							예를 든다면 PersonNotFoundException을 구성할 때
 							class PersonNotFoundException extends RuntimeException()
 			
 							
 ***AJAX (Asynchronus Javascript And Xml)***  
   			비동기 자바스크립트 통신 
   			
   			***페이지 리로딩 없는 부분 업데이트***
   			요청에 대한 응답을 웹 페이지가 아니라 필요한 데이터(text or xml or json)로 응답받는다
   			==> 필요데이터로 응답받아 화면에 부분 업데이트 		    
      	 
      	**비동기 요청 후 작업 지속**
      	서버에 요청을 보낸 후 응답을 기다리는 동안에도 사용자는 페이지의 다른 버튼을 누르거나 화면을 스크롤하는 등 다른 작업을 계속할 수 있습니다. 이는 사용성 측면에서 매우 중요
     	  
   XML 과 JSON : Ajax 통신시 사용하는 데이터 형식
				    	  구조화된 데이터 송수신을 위해 xml과 json을 이용한다 
			          2005년 이후 초기에는 xml 을 이용했으나 최근에는  json 을 이용한다 
			          
   JSON : JavaScript Object Notation  
            자바스크립트 객체 표기법
            Ajax 통신시 구조화된 데이터를 송수신하는 용도로 사용된다 
            경량이고 높은 생산성이 장점 
            
   Ajax 방식 세가지
   XmlHttpRequest 
   jQuery 
   fetch      
 
Fetch API : 자바스크립트의 표준 비동기 통신 API

비동기 웹 개발의 두 가지 핵심 개념
fetch와 async/await

fetch: 네트워크 요청을 보내는 기능
async/await: 그 요청의 응답을 다루는 방법


fetch 의 역할 
fetch는 Promise를 반환합니다.
fetch('URL') 함수를 호출하면, 네트워크 요청이 즉시 시작됩니다. 
이 함수는 요청이 완료될 때까지 기다리지 않고, 
대신 Promise라는 특별한 객체를 즉시 반환합니다. 
이 Promise는 "나중에 응답이 도착하면 성공 또는 실패 정보를 알려줄게"라고 
약속하는 역할을 합니다.

async 의 역할 
async 함수는 Promise를 기다릴 수 있습니다.
async 키워드가 붙은 함수 안에서만 await를 사용할 수 있습니다. 
이 async 함수는 Promise가 완료될 때까지 자신의 실행을 일시 중지하는 능력을 갖게 됩니다.

await 의 역할 
await가 fetch의 Promise를 기다립니다.
const response = await fetch('URL'); 코드를 보면, 
await는 fetch가 반환한 Promise가 완료될 때까지 기다립니다. 
하지만 이때, JavaScript의 메인 스레드는 멈추지 않습니다. 
asyn 함수 외의 다른 코드들이 계속 실행될 수 있게 해주어 비동기 작업이 가능하게 됩니다 
서버로부터 응답이 도착하면, fetch가 반환했던 Promise가 '완료' 상태가 됩니다. 
그러면 await는 const response에 응답 결과를 할당한 뒤 
async 함수의 다음 코드 라인을 실행하게 됩니다. 
 
 
 
                      
                    
                    
                                 	
  
   
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  