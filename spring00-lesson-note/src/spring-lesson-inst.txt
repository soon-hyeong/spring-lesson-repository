**spring lesson note**

주요 목차 ( spring 1차 프로젝트 전까지 ) 
- Maven 
- Git 형상관리 
- Spring 관련 용어 정리 
- IOC / DI  설정 스타일 
  1) xml 
  2) Annotation
  3) Java Confing
 - SpringBoot 소개 및  CommandLineRunner 
 
 - AOP 
 - MyBatis Framework 
 - SprigngMVC (Legacy)
 - SpringBoot Web 
 - JUnit , Logging
 - Thymeleaf
 - Ajax/JSON 
 - CSS Framework : Bootstrap 
 - Agile Scrum : Jira
 -------------------------------
 
 - Spring 관련 용어 정리 
 
 library : 라이브러리 , 재사용 가능한 프로그램들의 모음
 jar : 자바 프로그램 압축 확장자 ( springboot application 을 build )
 war : 자바 웹어플리케이션 확장자 
 component : 독립적 기능단위를 가진 부품 ( 부품화되는 요소를 컴포넌트라고 함 ) 
 			 Bean => 자바 컴포넌트 , 스프링에서 관리하는 컴포넌트(객체)를 Bean이라고 한다
 API : Application Programming Interface 응용 프로그램을 개발하기 위해 제공하는 
 	   인터페이스 
 Framework : 사전적 의미는 틀 , 
             frame( 틀 ) + work ( 일 ) => 일을 잘되게 하기 위해 제공하는 틀  
             반완전한 어플리케이션 -> 가능한 모든 요소를 지원하여 비즈니스에 집중하도록 함 
 Spring Framework : 자바 어플리케이션의 설계, 구현 , 테스트 , 운영에 대한 
                    Infrastructure 기반을 제공한다 
                    다양한 컴포넌트 및 재사용 가능한 라이브러리와 디자인 패턴을 제공한다
                    IOC/DI, AOP, SpringMVC, Data Access 를 위한 MyBatis , JPA 
                    , 신속한 설정과 개발을 위한 Spring Boot , 
                    단위 테스트를 위한 JUnit ,  보안을 위한 Spring Security, 
                    MSA 를 위한 Spring Cloud 등을 기술을 지원한다 
                    
 Maven  :  프로젝트 관리 도구 
 핵심 역할 
 1. 의존성 관리 (Dependency Management)와 2. 빌드 자동화 (Build Automation)                 
    필요 라이브러리를 일괄적으로 관리                 프로젝트 완료 후 배포 deploy 를 위해 jar or war 로 build 한다 
                     
 **IOC 와 DL/DI**                   
                    
   - IOC 개념 : Inversion Of Control  , 역 제어 , 제어의 역전  => 소프트웨어 설계 원리이자 디자인 패터ㄴ 
   					  객체 or Component or Bean 제어를 IOC Container에 위임 
   					  다시 말하면 필요시 객체를 생성하는 것이 아니라 IOC Container로부터 필요한 객체를 받아오는 구조 
   					  Why ?  Loose Coupling  느슨한 결합도 : 결합도란 모듈간의 상호 의존도, 결합도가 느슨해지면  확장성, 
   					  유지보수성 향상됨     
   - DI 개념 :  Dependecy Injection , 의존성 주입 => 디자인 패턴 
                     필요로 하는 의존성(Dependency: bean or component) 을 주입 Injection 을 통해 확보 
                     IOC 를 DI 기법을 통해 실현한다  
                          
   - DL 개념 :  Dependecy Lookup , 의존성 검색 => 디자인 패턴 
                     필요로 하는 의존성(Dependency: bean or component) 을 검색 Lookup 을 통해 확보 
                     IOC 를 DL 기법을 통해 실현한다                         
               					               
 **Spring 설정 방식**
 XML, Annotation, Java Config, Properties 등이 있다.
 XML + Annotation 조합 또는 Annotation + Java Config 또는 XML + Annotation + Java Config + Properties 로 다양하게 조합될 수 있다
 
 **Spring Annotation Config**
 - 컴포넌트 계열 애너테이션 : 스프링 컨테이너에게 해당 클래스가 bean 생성 대상임을 알리는 애너테이션
 					  Bean으로 생성되고 라이프 사이 관리 및 싱글톤으로 운영됨
 @Component : 컴포넌트 계열 상위 타입, 일반 컴포넌트 클래스에 명시, bean으로 생성 관리
 컴포넌트 계열 하위 어노테이션
 @Controller : MVC 중 Controller (RestController) 영역 Bean에 명시
 @Service : Business 또는 Service Layer에 명시
 @Repository : Data Access Object 또는 Persistence Layer 에 명시
 
 - 설정 애너테이션
 @Configuration : 해당 클래스가 Spring 설정 클래스임을 Spring Container에게 알리는 애너테이션
 @Bean 애너테이션 : @Configuration이 명시된 클래스 내부의 메서드에 사용하는 에너테이션
 				 메서드의 리턴값을 Bean으로 생성해 관리, 주로 외부 라이브러리에 의한 객체를 Bean으로 생성 관리할 때 사용한다
 @ComponenetScan(base package) : 지정한 base package와 그 하위의 모든 패키지들의 클래스들을 스캔해서
 								 bean 생성과 DI을 실행한다
 - DI(Dependency Injection)
 @Autowired : 의존성 or Bean or Component or 필요객체를 타입으로 검색해 
 			  주입(field, method, constructor 다 가능)
 @Qualifier(bean name) : 만약 동일한 타입의 객체 bean들이 여러개일 경우
 						 직접 bean name을 명시해서 주입 받을 수 있다
 그 외 @Resource, @Inject 등의 DI 관련 애너테이션이 있다
 
 **DI는 생성자 Constructor 를 통한 DI를 권장한다**
 final field에 Constructor를 통한 DI 를 권장하고 현업에서 주로 이렇게 사용한다
 ex)
 	@Controller
 	public class MemberController{
 		private final MemberService meberService;
 		@Autowired // 생략 가능 : 스프링 컨테이너가 의존성 주입 DI를 자동으로 해준다.
 		public MemberController(MemberService memberService){
 			this.memberService = memberService;
 		}
 	}
 	**final field 와 Constructor 를 통한 DI를 권장하는 이유**
 	-의존성 또는 Bean 또는 객체의 불변성 보장
 	 final field (final 인스턴스 변수(상수화))는 생성자로 초기화 될 수 있음
 	 불변성은 멀티스레딩시 안전
 	-의존성 확보가 보장된다. NPE(NullPointerException)을 사전에 방지할 수 있다
 	 참고로 Constructor Injection이 아닌 field Injection 또는 setter Injection은 의존성(필요로 하는 객체)을 주입하지 않아도 생성이 가능
 	 -> Constructor Injection은 필요로 하는 bean or 객체 or 의존성을 반드시 주입해야 해당 객체가 생성 가능하다 => 확실한 의존성 주입을 보장
 	*Spring IOC 컨테이너의 자동 DI(의존성 주입 기준)
 	 ===> Spring 4.3 버전 이상 (2025.7 기준 Spring 6 버전) 부터 지원
 	 	  단일 생성자(매개변수 여러개 가능)에 한해 자동 주입(@Autowired 생략 가능)
 	 	  만약 생성자가 여러 개일 경우에는 DI 관련 Annotation을 명시해야 한다
                    
 **Spring Bean LifeCycle**
 Bean : 스프링 컨테이너가 관리하는 객체(컴포넌트)
 
 Spring Container 실행(설정 로딩) -> Bean 생성 & DI
 -> 초기화 콜백(init callback) : @PostConstruct 생성 후 초기화 작업
 -> 서비스 : Bean의 기능 실행
 -> 소멸 콜백 (destroy callback ) : @PreDestroy : 소멸 직전 실행되는 작업
 -> 종료                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                                 	
  
   
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  